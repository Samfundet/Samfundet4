/* eslint-disable max-len */
/* Run this script from the terminal by goint to */
/* 'Samfundet4/frontend/src' and running 'node generateApiDocs.mjs'*/

import { readFileSync, writeFileSync } from 'fs';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// File paths
const tsFilePath = join(__dirname, 'api.ts'); // Path to file containing all API functions
const routesFilePath = join(__dirname, 'routes/backend.ts'); // Path to backend routes (generated by a python script in backend)
const outputFilePath = join(__dirname, '../../docs/api_documentation.md');

// Read file contents
const tsFileContent = readFileSync(tsFilePath, 'utf-8');
const routesFileContent = readFileSync(routesFilePath, 'utf-8');

// Function to extract API functions and their JSDoc comments from the TypeScript file
function extractApiFunctions(tsContent) {
  const lines = tsContent.split('\n');
  const functions = [];
  let functionName = '';
  let url = '';
  let isInFunction = false;
  let description = '';

  // tries to extract the JSDoc of the some API function
  lines.forEach((line) => {
    if (line.trim().startsWith('/**')) {
      // Start of a JSDoc comment
      description = '';
    } else if (line.trim().startsWith('*')) {
      // Inside a JSDoc comment
      description += line.trim().replace(/^\*\s?/, '') + ' ';
    } else if (line.trim().startsWith('*/')) {
      // End of a JSDoc comment
      description = description.trim();
    }

    // tries to extract the function name
    if (line.includes('export async function')) {
      functionName = line.split(' ')[3].split('(')[0]; // Get function name
      isInFunction = true; // used to signal that the script has reached the content of a function
    }

    // process for when inside of a function:
    if (isInFunction) {
      if (line.includes('const url = ')) {
        url = line.split('=')[1].trim().replace(/['"`]/g, ''); // Get URL
      }

      // a line containing 'axios.' wil contain the HTTP methode (GET, POST, PUT, etc.)
      if (line.includes('axios.')) {
        const axiosLine = line;
        const methodMatch = axiosLine.match(/axios\.(\w+)/); // Get HTTP method
        const routeMatch = url.match(/samfundet__\w+/); // Try to get the backend url (used to create the link in these docs)

        let method = 'UNKNOWN';
        let route = 'UNKNOWN';

        if (methodMatch) {
          method = methodMatch[1].toUpperCase();
        }

        if (routeMatch) {
          route = routeMatch[0];
        }

        functions.push({ functionName, method, route, description });
        isInFunction = false; // End function processing
        description = ''; // Reset description
      }
    }
  });

  return functions;
}

// Function to extract routes from the backed-routes file (found in frontend)
function extractRoutes(routesContent) {
  const lines = routesContent.split('\n');
  const routes = {};

  // tries to extract backend-routes, used to create link. Only used "samfundet__" backend endpoints, not e.i. "admin__".
  // Did this on the assumption that these are the most relevant endpoints to document.
  lines.forEach((line) => {
    if (line.includes('samfundet__')) {
      const [key, value] = line.split(':').map((part) => part.trim().replace(/['",]/g, ''));
      if (key && value) {
        routes[key] = value;
      }
    }
  });

  return routes;
}

// Creates markdown file with formating
function generateMarkdown(apiFunctions, routes) {
  let markdownContent =
    '# API Documentation\n\n *==auto-generated== by "generateApiDocs.mjs"*.\n\n Generate new documentation by going to *Samfundet4/frontend/src* in the terminal and running \n\n `node generateApiDocs.mjs` \n\n If API methods have JSDocs assosiated with them, it will be documented in the description.\n\n Server must of course be running to access local endpoints. Clicking some link should take you to the DRF user-interface. \n\n';

  apiFunctions.forEach((api) => {
    const { functionName, method, route, description } = api;
    // Construct the full route URL
    const fullRoute = 'http://localhost:8000' + (routes[route] || route);

    // Add function details to the Markdown content
    markdownContent += `## \`${functionName}\`\n`;
    markdownContent += `- **Method**: \`${method}\`\n`;
    markdownContent += `- **Endpoint**: [\`${fullRoute}\`](${fullRoute})\n`;
    markdownContent += `#### **Description**: \n\n ${description || 'No description provided.'}\n\n`;
  });

  return markdownContent;
}

// Main function to generate documentation
function generateApiDocs() {
  const apiFunctions = extractApiFunctions(tsFileContent);

  const routes = extractRoutes(routesFileContent);

  const markdownContent = generateMarkdown(apiFunctions, routes);

  writeFileSync(outputFilePath, markdownContent, 'utf-8');
  console.log('API documentation generated in:', outputFilePath);
}

// Run the script
generateApiDocs();

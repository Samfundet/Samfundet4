# Generated by Django 4.2.7 on 2023-11-02 17:49

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields
import samfundet.models.utils.fields


class Migration(migrations.Migration):
    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("samfundet", "0022_event_billig_id"),
    ]

    operations = [
        migrations.CreateModel(
            name="BilligEvent",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="event", primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(db_column="event_name", max_length=140)),
                ("sale_from", models.DateTimeField()),
                ("sale_to", models.DateTimeField()),
                ("hidden", models.BooleanField()),
            ],
            options={
                "verbose_name": "BilligEvent",
                "verbose_name_plural": "BilligEvents",
                "db_table": "billig.event",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BilligPriceGroup",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="price_group", primary_key=True, serialize=False
                    ),
                ),
                (
                    "name",
                    models.CharField(db_column="price_group_name", max_length=140),
                ),
                ("can_be_put_on_card", models.BooleanField()),
                ("membership_needed", models.BooleanField()),
                ("netsale", models.BooleanField()),
                ("price", models.IntegerField()),
            ],
            options={
                "verbose_name": "BilligPriceGroup",
                "verbose_name_plural": "BilligPriceGroups",
                "db_table": "billig.price_group",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="BilligTicketGroup",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        db_column="ticket_group", primary_key=True, serialize=False
                    ),
                ),
                (
                    "name",
                    models.CharField(db_column="ticket_group_name", max_length=140),
                ),
                ("num", models.PositiveIntegerField()),
                ("num_sold", models.PositiveIntegerField()),
                ("ticket_limit", models.PositiveIntegerField()),
            ],
            options={
                "verbose_name": "BilligTicketGroup",
                "verbose_name_plural": "BilligTicketGroups",
                "db_table": "billig.ticket_group",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Interview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "interview_time",
                    models.DateTimeField(
                        blank=True, help_text="The time of the interview", null=True
                    ),
                ),
                (
                    "interview_location",
                    models.CharField(
                        blank=True,
                        help_text="The location of the interview",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Notes for the interview", null=True
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=32, unique=True)),
            ],
            options={
                "verbose_name": "Organization",
                "verbose_name_plural": "Organizations",
            },
        ),
        migrations.CreateModel(
            name="Recruitment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name_nb",
                    models.CharField(
                        help_text="Name of the recruitment", max_length=100
                    ),
                ),
                (
                    "name_en",
                    models.CharField(
                        help_text="Name of the recruitment", max_length=100
                    ),
                ),
                (
                    "visible_from",
                    models.DateTimeField(
                        help_text="When it becomes visible for applicants"
                    ),
                ),
                (
                    "actual_application_deadline",
                    models.DateTimeField(
                        help_text="Last point an application can be sent, typically a bit after the shown deadline to avoid getting a lot of extra mail"
                    ),
                ),
                (
                    "shown_application_deadline",
                    models.DateTimeField(
                        help_text="The deadline that is shown to applicants"
                    ),
                ),
                (
                    "reprioritization_deadline_for_applicant",
                    models.DateTimeField(help_text="Before allocation meeting"),
                ),
                (
                    "reprioritization_deadline_for_groups",
                    models.DateTimeField(
                        help_text="Reprioritization deadline for groups"
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="The organization that is recruiting",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="samfundet.organization",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterModelOptions(
            name="user",
            options={
                "permissions": [
                    ("debug", "Can view debug mode"),
                    ("impersonate", "Can impersonate users"),
                ]
            },
        ),
        migrations.AddField(
            model_name="event",
            name="editors",
            field=models.ManyToManyField(blank=True, to="samfundet.gang"),
        ),
        migrations.AddField(
            model_name="gang",
            name="event_admin_group",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="gang_as_event_admin_group",
                to="auth.group",
                verbose_name="Arrangementgruppe",
            ),
        ),
        migrations.AddField(
            model_name="gang",
            name="gang_leader_group",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="gang_as_leader",
                to="auth.group",
                verbose_name="Gangleder",
            ),
        ),
        migrations.AddField(
            model_name="gang",
            name="recruitment_admin_group",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="gang_as_recruitment_admin_group",
                to="auth.group",
                verbose_name="Innganggruppe",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="phone_number",
            field=samfundet.models.utils.fields.PhoneNumberField(
                default=4748278994, max_length=15, verbose_name="phone_number"
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="userpreference",
            name="cursor_trail",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="venue",
            name="slug",
            field=models.SlugField(null=True, unique=True),
        ),
        migrations.AlterField(
            model_name="event",
            name="billig_id",
            field=models.IntegerField(blank=True, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name="gang",
            name="abbreviation",
            field=models.CharField(
                blank=True, max_length=8, null=True, verbose_name="Forkortelse"
            ),
        ),
        migrations.AlterField(
            model_name="informationpage",
            name="slug_field",
            field=models.SlugField(
                blank=True,
                help_text="Primary key, this field will identify the object and be used in the URL.",
                max_length=64,
                primary_key=True,
                serialize=False,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="email",
            field=models.EmailField(max_length=254, unique=True, verbose_name="email"),
        ),
        migrations.AlterField(
            model_name="user",
            name="username",
            field=samfundet.models.utils.fields.LowerCaseField(
                error_messages={"unique": "A user with that username already exists."},
                help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                max_length=150,
                unique=True,
                validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                verbose_name="username",
            ),
        ),
        migrations.CreateModel(
            name="Reservation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=64, verbose_name="Navn"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=64, verbose_name="Epost"),
                ),
                (
                    "phonenumber",
                    models.CharField(
                        blank=True,
                        max_length=8,
                        null=True,
                        verbose_name="Telefonnummer",
                    ),
                ),
                ("date", models.DateField(blank=True, verbose_name="Dato")),
                ("start_time", models.TimeField(blank=True, verbose_name="Starttid")),
                ("end_time", models.TimeField(blank=True, verbose_name="Sluttid")),
                (
                    "occasion",
                    models.CharField(
                        choices=[("DRINK", "Drikke"), ("FOOD", "Mat")],
                        default="FOOD",
                        max_length=24,
                    ),
                ),
                (
                    "guest_count",
                    models.PositiveSmallIntegerField(verbose_name="Antall gjester"),
                ),
                (
                    "additional_info",
                    models.TextField(
                        blank=True, null=True, verbose_name="Tilleggsinformasjon"
                    ),
                ),
                (
                    "internal_messages",
                    models.TextField(
                        blank=True, null=True, verbose_name="Interne meldinger"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "venue",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="samfundet.venue",
                        verbose_name="Sted",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reservation",
                "verbose_name_plural": "Reservations",
            },
        ),
        migrations.CreateModel(
            name="RecruitmentPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name_nb",
                    models.CharField(help_text="Name of the position", max_length=100),
                ),
                (
                    "name_en",
                    models.CharField(help_text="Name of the position", max_length=100),
                ),
                (
                    "short_description_nb",
                    models.CharField(
                        help_text="Short description of the position", max_length=100
                    ),
                ),
                (
                    "short_description_en",
                    models.CharField(
                        help_text="Short description of the position", max_length=100
                    ),
                ),
                (
                    "long_description_nb",
                    models.TextField(help_text="Long description of the position"),
                ),
                (
                    "long_description_en",
                    models.TextField(help_text="Long description of the position"),
                ),
                (
                    "is_funksjonaer_position",
                    models.BooleanField(help_text="Is this a funksjonær position?"),
                ),
                (
                    "default_admission_letter_nb",
                    models.TextField(
                        help_text="Default admission letter for the position"
                    ),
                ),
                (
                    "default_admission_letter_en",
                    models.TextField(
                        help_text="Default admission letter for the position"
                    ),
                ),
                (
                    "tags",
                    models.CharField(help_text="Tags for the position", max_length=100),
                ),
                (
                    "gang",
                    models.ForeignKey(
                        help_text="The gang that is recruiting",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="samfundet.gang",
                    ),
                ),
                (
                    "interviewers",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Interviewers for the position",
                        related_name="interviewers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "recruitment",
                    models.ForeignKey(
                        blank=True,
                        help_text="The recruitment that is recruiting",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="positions",
                        to="samfundet.recruitment",
                    ),
                ),
                (
                    "shared_interview_positions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Positions with shared interview",
                        to="samfundet.recruitmentposition",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RecruitmentAdmission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "admission_text",
                    models.TextField(help_text="Admission text for the admission"),
                ),
                (
                    "applicant_priority",
                    models.IntegerField(help_text="The priority of the admission"),
                ),
                (
                    "recruiter_priority",
                    models.IntegerField(
                        choices=[
                            (0, "Not Set"),
                            (1, "Not Wanted"),
                            (2, "Wanted"),
                            (3, "Reserve"),
                        ],
                        default=0,
                        help_text="The priority of the admission",
                    ),
                ),
                (
                    "recruiter_status",
                    models.IntegerField(
                        choices=[
                            (0, "Nothing"),
                            (1, "Called and Accepted"),
                            (2, "Called and Rejected"),
                            (3, "Automatic Rejection"),
                        ],
                        default=0,
                        help_text="The status of the admission",
                    ),
                ),
                (
                    "interview",
                    models.ForeignKey(
                        blank=True,
                        help_text="The interview for the admission",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="admissions",
                        to="samfundet.interview",
                    ),
                ),
                (
                    "recruitment",
                    models.ForeignKey(
                        help_text="The recruitment that is recruiting",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admissions",
                        to="samfundet.recruitment",
                    ),
                ),
                (
                    "recruitment_position",
                    models.ForeignKey(
                        help_text="The recruitment position that is recruiting",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admissions",
                        to="samfundet.recruitmentposition",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user that is applying",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="admissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InterviewRoom",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the room", max_length=255),
                ),
                (
                    "location",
                    models.CharField(
                        help_text="Physical location, eg. campus", max_length=255
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(help_text="Start time of availability"),
                ),
                (
                    "end_time",
                    models.DateTimeField(help_text="End time of availability"),
                ),
                (
                    "gang",
                    models.ForeignKey(
                        blank=True,
                        help_text="The gang that booked the room",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rooms",
                        to="samfundet.gang",
                    ),
                ),
                (
                    "recruitment",
                    models.ForeignKey(
                        help_text="The recruitment that is recruiting",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rooms",
                        to="samfundet.recruitment",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="interview",
            name="room",
            field=models.ForeignKey(
                blank=True,
                help_text="Room where the interview is held",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="interviews",
                to="samfundet.interviewroom",
            ),
        ),
        migrations.CreateModel(
            name="Infobox",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title_nb",
                    models.CharField(
                        max_length=60, verbose_name="Infoboks titel (norsk)"
                    ),
                ),
                (
                    "text_nb",
                    models.CharField(
                        max_length=255, verbose_name="Infoboks tekst (norsk)"
                    ),
                ),
                (
                    "title_en",
                    models.CharField(
                        max_length=60, verbose_name="Infoboks tekst (engelsk)"
                    ),
                ),
                (
                    "text_en",
                    models.CharField(
                        max_length=255, verbose_name="Infoboks tekst (engelsk)"
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        max_length=15,
                        verbose_name="Infoboks hexcolor eller css color-constant",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True, null=True, verbose_name="Infoboks utgående link"
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="samfundet.image",
                        verbose_name="Infoboks bilde",
                    ),
                ),
            ],
            options={
                "verbose_name": "Infoboks",
                "verbose_name_plural": "Infobokser",
            },
        ),
        migrations.CreateModel(
            name="BlogPost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title_nb",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        null=True,
                        verbose_name="Tittel (norsk)",
                    ),
                ),
                (
                    "text_nb",
                    models.TextField(
                        blank=True, null=True, verbose_name="Tekst (norsk)"
                    ),
                ),
                (
                    "title_en",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        null=True,
                        verbose_name="Tittel (engelsk)",
                    ),
                ),
                (
                    "text_en",
                    models.TextField(
                        blank=True, null=True, verbose_name="Tekst (engelsk)"
                    ),
                ),
                ("published_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="samfundet.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog post",
                "verbose_name_plural": "Blogg posts",
            },
        ),
        migrations.AddField(
            model_name="gang",
            name="organization",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="gangs",
                to="samfundet.organization",
                verbose_name="Organisasjon",
            ),
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("success", "success"),
                            ("info", "info"),
                            ("warning", "warning"),
                            ("error", "error"),
                        ],
                        default="info",
                        max_length=20,
                        verbose_name="level",
                    ),
                ),
                (
                    "unread",
                    models.BooleanField(
                        db_index=True, default=True, verbose_name="unread"
                    ),
                ),
                (
                    "actor_object_id",
                    models.CharField(max_length=255, verbose_name="actor object id"),
                ),
                ("verb", models.CharField(max_length=255, verbose_name="verb")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="description"),
                ),
                (
                    "target_object_id",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="target object id",
                    ),
                ),
                (
                    "action_object_object_id",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="action object object id",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        verbose_name="timestamp",
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        db_index=True, default=True, verbose_name="public"
                    ),
                ),
                (
                    "deleted",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="deleted"
                    ),
                ),
                (
                    "emailed",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="emailed"
                    ),
                ),
                (
                    "data",
                    jsonfield.fields.JSONField(
                        blank=True, null=True, verbose_name="data"
                    ),
                ),
                (
                    "action_object_content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notify_action_object",
                        to="contenttypes.contenttype",
                        verbose_name="action object content type",
                    ),
                ),
                (
                    "actor_content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notify_actor",
                        to="contenttypes.contenttype",
                        verbose_name="actor content type",
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="recipient",
                    ),
                ),
                (
                    "target_content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notify_target",
                        to="contenttypes.contenttype",
                        verbose_name="target content type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification",
                "verbose_name_plural": "Notifications",
                "ordering": ("-timestamp",),
                "abstract": False,
                "index_together": {("recipient", "unread")},
            },
        ),
    ]

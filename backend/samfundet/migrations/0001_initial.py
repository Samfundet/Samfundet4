# Generated by Django 5.1.1 on 2024-09-12 15:13

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import samfundet.models.utils.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BilligEvent',
            fields=[
                ('id', models.IntegerField(db_column='event', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='event_name', max_length=140)),
                ('sale_from', models.DateTimeField()),
                ('sale_to', models.DateTimeField()),
                ('hidden', models.BooleanField()),
            ],
            options={
                'verbose_name': 'BilligEvent',
                'verbose_name_plural': 'BilligEvents',
                'db_table': 'billig.event',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BilligPriceGroup',
            fields=[
                ('id', models.IntegerField(db_column='price_group', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='price_group_name', max_length=140)),
                ('can_be_put_on_card', models.BooleanField()),
                ('membership_needed', models.BooleanField()),
                ('netsale', models.BooleanField()),
                ('price', models.IntegerField()),
            ],
            options={
                'verbose_name': 'BilligPriceGroup',
                'verbose_name_plural': 'BilligPriceGroups',
                'db_table': 'billig.price_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BilligTicketGroup',
            fields=[
                ('id', models.IntegerField(db_column='ticket_group', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='ticket_group_name', max_length=140)),
                ('num', models.PositiveIntegerField()),
                ('num_sold', models.PositiveIntegerField()),
                ('ticket_limit', models.PositiveIntegerField()),
            ],
            options={
                'verbose_name': 'BilligTicketGroup',
                'verbose_name_plural': 'BilligTicketGroups',
                'db_table': 'billig.ticket_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Campus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_nb', models.CharField(max_length=64, unique=True)),
                ('name_en', models.CharField(max_length=64, unique=True)),
                ('abbreviation', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KeyValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=60, unique=True)),
                ('value', models.CharField(blank=True, default='', max_length=60)),
            ],
            options={
                'verbose_name': 'KeyValue',
                'verbose_name_plural': 'KeyValues',
            },
        ),
        migrations.CreateModel(
            name='NonMemberEmailRegistration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(editable=False, max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('username', samfundet.models.utils.fields.LowerCaseField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('phone_number', samfundet.models.utils.fields.PhoneNumberField(max_length=15, verbose_name='phone_number')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('campus', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='samfundet.campus')),
            ],
            options={
                'permissions': [('debug', 'Can view debug mode'), ('impersonate', 'Can impersonate users')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClosedPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('message_nb', models.TextField(blank=True, null=True, verbose_name='Melding (norsk)')),
                ('message_en', models.TextField(blank=True, null=True, verbose_name='Melding (engelsk)')),
                ('description_nb', models.TextField(blank=True, null=True, verbose_name='Beskrivelse (norsk)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Beskrivelse (engelsk)')),
                ('start_dt', models.DateField(blank=True, verbose_name='Start dato')),
                ('end_dt', models.DateField(blank=True, verbose_name='Slutt dato')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'ClosedPeriod',
                'verbose_name_plural': 'ClosedPeriods',
            },
        ),
        migrations.CreateModel(
            name='EventCustomTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name_nb', models.CharField(max_length=140)),
                ('name_en', models.CharField(max_length=140)),
                ('price', models.PositiveIntegerField()),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=140)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'EventGroup',
                'verbose_name_plural': 'EventGroups',
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registered_users', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('registered_emails', models.ManyToManyField(blank=True, to='samfundet.nonmemberemailregistration')),
            ],
        ),
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name_nb', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Navn (norsk)')),
                ('name_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Navn (engelsk)')),
                ('order', models.PositiveSmallIntegerField(blank=True, null=True, unique=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'FoodCategory',
                'verbose_name_plural': 'FoodCategories',
            },
        ),
        migrations.CreateModel(
            name='FoodPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name_nb', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Navn (norsk)')),
                ('name_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Navn (engelsk)')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'FoodPreference',
                'verbose_name_plural': 'FoodPreferences',
            },
        ),
        migrations.CreateModel(
            name='GangType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('title_nb', models.CharField(blank=True, max_length=64, null=True, verbose_name='Gruppetype Norsk')),
                ('title_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Gruppetype Engelsk')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'GangType',
                'verbose_name_plural': 'GangTypes',
            },
        ),
        migrations.CreateModel(
            name='Gang',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name_nb', models.CharField(blank=True, max_length=64, null=True, verbose_name='Navn Norsk')),
                ('name_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Navn Engelsk')),
                ('abbreviation', models.CharField(blank=True, max_length=8, null=True, verbose_name='Forkortelse')),
                ('webpage', models.URLField(blank=True, null=True, verbose_name='Nettside')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='ganglogos/', verbose_name='Logo')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('event_admin_group', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gang_as_event_admin_group', to='auth.group', verbose_name='Arrangementgruppe')),
                ('gang_leader_group', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gang_as_leader', to='auth.group', verbose_name='Gangleder')),
                ('recruitment_admin_group', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gang_as_recruitment_admin_group', to='auth.group', verbose_name='Innganggruppe')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('gang_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gangs', to='samfundet.gangtype', verbose_name='Gruppetype')),
            ],
            options={
                'verbose_name': 'Gang',
                'verbose_name_plural': 'Gangs',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('title', models.CharField(max_length=140)),
                ('image', models.ImageField(upload_to='images/')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
            },
        ),
        migrations.CreateModel(
            name='GangSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name_nb', models.CharField(blank=True, max_length=64, verbose_name='Navn Norsk')),
                ('name_en', models.CharField(blank=True, max_length=64, verbose_name='Navn Engelsk')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('gang', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='gang', to='samfundet.gang', verbose_name='Gjeng')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='samfundet.image', verbose_name='Logo')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('status', models.CharField(choices=[('active', 'Aktiv'), ('archived', 'Arkivert'), ('cancelled', 'Avlyst'), ('deleted', 'Slettet')], default='active', max_length=30)),
                ('title_nb', models.CharField(max_length=140)),
                ('title_en', models.CharField(max_length=140)),
                ('description_long_nb', models.TextField()),
                ('description_long_en', models.TextField()),
                ('description_short_nb', models.TextField()),
                ('description_short_en', models.TextField()),
                ('location', models.CharField(max_length=140)),
                ('host', models.CharField(max_length=140)),
                ('age_restriction', models.CharField(choices=[('none', 'Ingen aldersgrense'), ('eighteen', '18 år'), ('twenty', '20 år'), ('mixed', '18 år (student), 20 år (ikke-student)')], default=None, max_length=30)),
                ('category', models.CharField(choices=[('samfundsmote', 'Samfundsmøte'), ('concert', 'Konsert'), ('debate', 'Debatt'), ('quiz', 'Quiz'), ('lecture', 'Kurs'), ('other', 'Annet')], default='other', max_length=30)),
                ('start_dt', models.DateTimeField()),
                ('duration', models.PositiveIntegerField()),
                ('publish_dt', models.DateTimeField()),
                ('doors_time', models.TimeField(blank=True, null=True)),
                ('capacity', models.PositiveIntegerField()),
                ('ticket_type', models.CharField(choices=[('included', 'Included with entrance'), ('free', 'Free'), ('billig', 'Paid'), ('registration', 'Free with registration'), ('custom', 'Custom')], default='free', max_length=30)),
                ('billig_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('custom_tickets', models.ManyToManyField(blank=True, to='samfundet.eventcustomticket')),
                ('event_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='samfundet.eventgroup')),
                ('registration', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='samfundet.eventregistration')),
                ('editors', models.ManyToManyField(blank=True, to='samfundet.gang')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='samfundet.image')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('title_nb', models.CharField(blank=True, max_length=64, null=True, verbose_name='Tittel (norsk)')),
                ('text_nb', models.TextField(blank=True, null=True, verbose_name='Tekst (norsk)')),
                ('title_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Tittel (engelsk)')),
                ('text_en', models.TextField(blank=True, null=True, verbose_name='Tekst (engelsk)')),
                ('published_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='samfundet.image')),
            ],
            options={
                'verbose_name': 'Blog post',
                'verbose_name_plural': 'Blogg posts',
            },
        ),
        migrations.CreateModel(
            name='Infobox',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('title_nb', models.CharField(max_length=60, verbose_name='Infoboks titel (norsk)')),
                ('text_nb', models.CharField(max_length=255, verbose_name='Infoboks tekst (norsk)')),
                ('title_en', models.CharField(max_length=60, verbose_name='Infoboks tekst (engelsk)')),
                ('text_en', models.CharField(max_length=255, verbose_name='Infoboks tekst (engelsk)')),
                ('color', models.CharField(max_length=15, verbose_name='Infoboks hexcolor eller css color-constant')),
                ('url', models.URLField(blank=True, null=True, verbose_name='Infoboks utgående link')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='samfundet.image', verbose_name='Infoboks bilde')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Infoboks',
                'verbose_name_plural': 'Infobokser',
            },
        ),
        migrations.CreateModel(
            name='InformationPage',
            fields=[
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('slug_field', models.SlugField(blank=True, help_text='Primary key, this field will identify the object and be used in the URL.', max_length=64, primary_key=True, serialize=False, unique=True)),
                ('title_nb', models.CharField(blank=True, max_length=64, null=True, verbose_name='Tittel (norsk)')),
                ('text_nb', models.TextField(blank=True, null=True, verbose_name='Tekst (norsk)')),
                ('title_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Tittel (engelsk)')),
                ('text_en', models.TextField(blank=True, null=True, verbose_name='Tekst (engelsk)')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'InformationPage',
                'verbose_name_plural': 'InformationPages',
            },
        ),
        migrations.AddField(
            model_name='gang',
            name='info_page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='samfundet.informationpage', verbose_name='Infoside'),
        ),
        migrations.CreateModel(
            name='InterviewRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name', models.CharField(help_text='Name of the room', max_length=255)),
                ('location', models.CharField(help_text='Physical location, eg. campus', max_length=255)),
                ('start_time', models.DateTimeField(help_text='Start time of availability')),
                ('end_time', models.DateTimeField(help_text='End time of availability')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('gang', models.ForeignKey(blank=True, help_text='The gang that booked the room', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='samfundet.gang')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Interview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('interview_time', models.DateTimeField(blank=True, help_text='The time of the interview', null=True)),
                ('interview_location', models.CharField(blank=True, help_text='The location of the interview', max_length=255, null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes for the interview', null=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('interviewers', models.ManyToManyField(blank=True, help_text='Interviewers for this interview', related_name='interviews', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(blank=True, help_text='Room where the interview is held', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='interviews', to='samfundet.interviewroom')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name_nb', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Navn (norsk)')),
                ('description_nb', models.TextField(blank=True, null=True, verbose_name='Beskrivelse (norsk)')),
                ('name_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Navn (engelsk)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Beskrivelse (engelsk)')),
                ('price', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('price_member', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('order', models.PositiveSmallIntegerField(blank=True, null=True, unique=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('food_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='samfundet.foodcategory')),
                ('food_preferences', models.ManyToManyField(blank=True, to='samfundet.foodpreference')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'MenuItem',
                'verbose_name_plural': 'MenuItems',
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name_nb', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Navn (norsk)')),
                ('description_nb', models.TextField(blank=True, null=True, verbose_name='Beskrivelse (norsk)')),
                ('name_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Navn (engelsk)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Beskrivelse (engelsk)')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('menu_items', models.ManyToManyField(blank=True, to='samfundet.menuitem')),
            ],
            options={
                'verbose_name': 'Menu',
                'verbose_name_plural': 'Menus',
            },
        ),
        migrations.CreateModel(
            name='Merch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_nb', models.CharField(blank=True, max_length=60, verbose_name='Navn (norsk)')),
                ('description_nb', models.CharField(blank=True, max_length=255, verbose_name='Beskrivelse (norsk)')),
                ('name_en', models.CharField(blank=True, max_length=60, verbose_name='Navn (engelsk)')),
                ('description_en', models.CharField(blank=True, max_length=255, verbose_name='Beskrivelse (engelsk)')),
                ('base_price', models.PositiveSmallIntegerField(blank=True)),
                ('released_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='samfundet.image', verbose_name='Produkt Bilde')),
            ],
            options={
                'verbose_name': 'Merch',
                'verbose_name_plural': 'Merch',
            },
        ),
        migrations.CreateModel(
            name='MerchVariation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specification', models.CharField(max_length=16, verbose_name='Variation specification')),
                ('price', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Price Variation')),
                ('stock', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='In stock')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('merch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variations', to='samfundet.merch', verbose_name='Merch')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
            },
        ),
        migrations.AddField(
            model_name='gang',
            name='organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='gangs', to='samfundet.organization', verbose_name='Organisasjon'),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(blank=True, max_length=30, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='PurchaseFeedbackModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='samfundet.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'PurchaseFeedback',
            },
        ),
        migrations.CreateModel(
            name='Recruitment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name_nb', models.CharField(help_text='Name of the recruitment', max_length=100)),
                ('name_en', models.CharField(help_text='Name of the recruitment', max_length=100)),
                ('visible_from', models.DateTimeField(help_text='When it becomes visible for applicants')),
                ('actual_application_deadline', models.DateTimeField(help_text='Last point an application can be sent, typically a bit after the shown deadline to avoid getting a lot of extra mail')),
                ('shown_application_deadline', models.DateTimeField(help_text='The deadline that is shown to applicants')),
                ('reprioritization_deadline_for_applicant', models.DateTimeField(help_text='Before allocation meeting')),
                ('reprioritization_deadline_for_groups', models.DateTimeField(help_text='Reprioritization deadline for groups')),
                ('max_applications', models.PositiveIntegerField(blank=True, null=True, verbose_name='Max applications per applicant')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(help_text='The organization that is recruiting', on_delete=django.db.models.deletion.CASCADE, to='samfundet.organization')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='interviewroom',
            name='recruitment',
            field=models.ForeignKey(help_text='The recruitment that is recruiting', on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='samfundet.recruitment'),
        ),
        migrations.CreateModel(
            name='RecruitmentPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name_nb', models.CharField(help_text='Name of the position', max_length=100)),
                ('name_en', models.CharField(help_text='Name of the position', max_length=100)),
                ('short_description_nb', models.CharField(help_text='Short description of the position', max_length=100)),
                ('short_description_en', models.CharField(blank=True, help_text='Short description of the position', max_length=100, null=True)),
                ('long_description_nb', models.TextField(help_text='Long description of the position')),
                ('long_description_en', models.TextField(blank=True, help_text='Long description of the position', null=True)),
                ('is_funksjonaer_position', models.BooleanField(help_text='Is this a funksjonær position?')),
                ('default_application_letter_nb', models.TextField(help_text='Default application letter for the position')),
                ('default_application_letter_en', models.TextField(blank=True, help_text='Default application letter for the position', null=True)),
                ('norwegian_applicants_only', models.BooleanField(default=False, help_text='Is this position only for Norwegian applicants?')),
                ('tags', models.CharField(help_text='Tags for the position', max_length=100)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('gang', models.ForeignKey(help_text='The gang that is recruiting', on_delete=django.db.models.deletion.CASCADE, to='samfundet.gang')),
                ('interviewers', models.ManyToManyField(blank=True, help_text='Interviewers for the position', related_name='interviewers', to=settings.AUTH_USER_MODEL)),
                ('recruitment', models.ForeignKey(blank=True, help_text='The recruitment that is recruiting', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='samfundet.recruitment')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecruitmentInterviewAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('start_date', models.DateField(help_text='First possible date for interviews')),
                ('end_date', models.DateField(help_text='Last possible date for interviews')),
                ('start_time', models.TimeField(default='08:00:00', help_text='First possible time of day for interviews')),
                ('end_time', models.TimeField(default='23:00:00', help_text='Last possible time of day for interviews')),
                ('timeslot_interval', models.PositiveSmallIntegerField(default=30, help_text='The time interval (in minutes) between each timeslot')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('recruitment', models.ForeignKey(help_text='Which recruitment this availability applies to', on_delete=django.db.models.deletion.CASCADE, to='samfundet.recruitment')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('position', models.ForeignKey(blank=True, help_text='Which position this availability applies to', null=True, on_delete=django.db.models.deletion.CASCADE, to='samfundet.recruitmentposition')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecruitmentApplication',
            fields=[
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('application_text', models.TextField(help_text='Application text')),
                ('applicant_priority', models.PositiveIntegerField(blank=True, help_text='The priority of the application', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('withdrawn', models.BooleanField(blank=True, default=False, null=True)),
                ('recruiter_priority', models.IntegerField(choices=[(0, 'Not Set'), (1, 'Reserve'), (2, 'Wanted'), (3, 'Not Wanted')], default=0, help_text='The priority of the application')),
                ('recruiter_status', models.IntegerField(choices=[(0, 'Not Set'), (1, 'Called and Accepted'), (2, 'Called and Rejected'), (3, 'Rejection'), (4, 'Automatic Rejection')], default=0, help_text='The status of the application')),
                ('applicant_state', models.IntegerField(choices=[(0, 'Unprocessed by all above on priority'), (1, 'Highest priority, and reserve'), (2, 'Highest priority, and wanted'), (3, 'Another position has this on reserve, with higher priority'), (4, 'Another position has this on reserve, with higher priority, but you have reserved'), (5, 'Another position has this on reserve, with higher priority, but you have them as wanted'), (6, 'Another position has this on reserve, with higher priority'), (7, 'Another position has this on wanted, with higher priority, but you have reserved'), (8, 'Another position has this on wanted, with higher priority, but you have them as wanted'), (10, 'Other position has priority')], default=0, help_text='The state of the applicant for the recruiter')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('interview', models.ForeignKey(blank=True, help_text='The interview for the application', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applications', to='samfundet.interview')),
                ('recruitment', models.ForeignKey(help_text='The recruitment that is recruiting', on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='samfundet.recruitment')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='The user that is applying', on_delete=django.db.models.deletion.CASCADE, related_name='applications', to=settings.AUTH_USER_MODEL)),
                ('recruitment_position', models.ForeignKey(help_text='The position which is recruiting', on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='samfundet.recruitmentposition')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecruitmentPositionSharedInterviewGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('recruitment', models.ForeignKey(blank=True, help_text='The recruitment that is recruiting', on_delete=django.db.models.deletion.CASCADE, related_name='interview_groups', to='samfundet.recruitment')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='recruitmentposition',
            name='shared_interview_group',
            field=models.ForeignKey(blank=True, help_text='Shared interviewgroup for position', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='positions', to='samfundet.recruitmentpositionsharedinterviewgroup'),
        ),
        migrations.CreateModel(
            name='RecruitmentSeparatePosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name_nb', models.CharField(help_text='Name of the position', max_length=100)),
                ('name_en', models.CharField(help_text='Name of the position', max_length=100)),
                ('description_nb', models.CharField(blank=True, help_text='Short description of the position (NB)', max_length=100, null=True)),
                ('description_en', models.CharField(blank=True, help_text='Short description of the position (EN)', max_length=100, null=True)),
                ('url', models.URLField(help_text='URL to website of separate recruitment')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('recruitment', models.ForeignKey(blank=True, help_text='The recruitment that is recruiting', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='separate_positions', to='samfundet.recruitment')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecruitmentStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_applicants', models.PositiveIntegerField(blank=True, null=True, verbose_name='Total applicants')),
                ('total_applications', models.PositiveIntegerField(blank=True, null=True, verbose_name='Total applications')),
                ('recruitment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='samfundet.recruitment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecruitmentGangStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_count', models.PositiveIntegerField(verbose_name='Count')),
                ('applicant_count', models.PositiveIntegerField(verbose_name='Count')),
                ('gang', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='date_stats', to='samfundet.gang')),
                ('recruitment_stats', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gang_stats', to='samfundet.recruitmentstatistics')),
            ],
        ),
        migrations.CreateModel(
            name='RecruitmentDateStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Time')),
                ('count', models.PositiveIntegerField(verbose_name='Count')),
                ('recruitment_stats', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='date_stats', to='samfundet.recruitmentstatistics')),
            ],
        ),
        migrations.CreateModel(
            name='RecruitmentCampusStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.PositiveIntegerField(verbose_name='Count')),
                ('campus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='date_stats', to='samfundet.campus')),
                ('recruitment_stats', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campus_stats', to='samfundet.recruitmentstatistics')),
            ],
        ),
        migrations.CreateModel(
            name='RecruitmentTimeStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hour', models.PositiveIntegerField(verbose_name='Time')),
                ('count', models.PositiveIntegerField(verbose_name='Count')),
                ('recruitment_stats', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_stats', to='samfundet.recruitmentstatistics')),
            ],
        ),
        migrations.CreateModel(
            name='Saksdokument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('title_nb', models.CharField(blank=True, max_length=80, null=True, verbose_name='Tittel (Norsk)')),
                ('title_en', models.CharField(blank=True, max_length=80, null=True, verbose_name='Tittel (Engelsk)')),
                ('publication_date', models.DateTimeField(blank=True, null=True)),
                ('category', models.CharField(choices=[('FS_REFERAT', 'FS-Referat'), ('STYRET', 'Styret'), ('RADET', 'Rådet'), ('ARSBERETNINGER', 'Årsberetninger, regnskap og budsjettkunngjøringer')], default='FS_REFERAT', max_length=25)),
                ('file', models.FileField(blank=True, null=True, upload_to='uploads/saksdokument/')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Saksdokument',
                'verbose_name_plural': 'Saksdokumenter',
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name_nb', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Navn (norsk)')),
                ('description_nb', models.CharField(blank=True, max_length=64, null=True, verbose_name='Beskrivelse (norsk)')),
                ('name_en', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Navn (engelsk)')),
                ('description_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Beskrivelse (engelsk)')),
                ('seating', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Table',
                'verbose_name_plural': 'Tables',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name', models.CharField(blank=True, max_length=64, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('from_dt', models.DateTimeField(blank=True, null=True)),
                ('to_dt', models.DateTimeField(blank=True, null=True)),
                ('first_name', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('last_name', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('email', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('phone_nr', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('tables', models.ManyToManyField(blank=True, to='samfundet.table')),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=140)),
                ('color', models.CharField(blank=True, max_length=6, null=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.AddField(
            model_name='image',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='images', to='samfundet.tag'),
        ),
        migrations.CreateModel(
            name='TextItem',
            fields=[
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False, unique=True)),
                ('text_nb', models.TextField()),
                ('text_en', models.TextField()),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'TextItem',
                'verbose_name_plural': 'TextItems',
            },
        ),
        migrations.CreateModel(
            name='UserFeedbackModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('path', models.CharField(blank=True, max_length=255)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user_agent', models.TextField(blank=True)),
                ('screen_resolution', models.CharField(blank=True, max_length=13)),
                ('contact_email', models.EmailField(max_length=254, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'UserFeedback',
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(blank=True, choices=[('theme-light', 'Light'), ('theme-dark', 'Dark')], default='theme-light', max_length=30, null=True)),
                ('mirror_dimension', models.BooleanField(default=False)),
                ('cursor_trail', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'UserPreference',
                'verbose_name_plural': 'UserPreferences',
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name', models.CharField(blank=True, max_length=140, null=True, unique=True)),
                ('slug', models.SlugField(null=True, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('floor', models.IntegerField(blank=True, null=True)),
                ('last_renovated', models.DateTimeField(blank=True, null=True)),
                ('handicapped_approved', models.BooleanField(blank=True, null=True)),
                ('responsible_crew', models.CharField(blank=True, max_length=140, null=True)),
                ('opening', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('closing', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('opening_monday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('opening_tuesday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('opening_wednesday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('opening_thursday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('opening_friday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('opening_saturday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('opening_sunday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('closing_monday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('closing_tuesday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('closing_wednesday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('closing_thursday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('closing_friday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('closing_saturday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('closing_sunday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Venue',
                'verbose_name_plural': 'Venues',
            },
        ),
        migrations.AddField(
            model_name='table',
            name='venue',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='samfundet.venue'),
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('name', models.CharField(blank=True, max_length=64, verbose_name='Navn')),
                ('email', models.EmailField(blank=True, max_length=64, verbose_name='Epost')),
                ('phonenumber', models.CharField(blank=True, max_length=8, null=True, verbose_name='Telefonnummer')),
                ('reservation_date', models.DateField(blank=True, verbose_name='Dato')),
                ('start_time', models.TimeField(blank=True, verbose_name='Starttid')),
                ('end_time', models.TimeField(blank=True, verbose_name='Sluttid')),
                ('occasion', models.CharField(choices=[('DRINK', 'Drikke'), ('FOOD', 'Mat')], default='FOOD', max_length=24)),
                ('guest_count', models.PositiveSmallIntegerField(verbose_name='Antall gjester')),
                ('additional_info', models.TextField(blank=True, null=True, verbose_name='Tilleggsinformasjon')),
                ('internal_messages', models.TextField(blank=True, null=True, verbose_name='Interne meldinger')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('table', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='samfundet.table', verbose_name='Bord')),
                ('venue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='samfundet.venue', verbose_name='Sted')),
            ],
            options={
                'verbose_name': 'Reservation',
                'verbose_name_plural': 'Reservations',
            },
        ),
        migrations.CreateModel(
            name='PurchaseFeedbackAlternative',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alternative', models.CharField(blank=True, max_length=255)),
                ('selected', models.CharField(max_length=255)),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='samfundet.purchasefeedbackmodel')),
            ],
            options={
                'unique_together': {('form', 'alternative')},
            },
        ),
        migrations.CreateModel(
            name='PurchaseFeedbackQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.PositiveIntegerField(blank=True, default=0, editable=False, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('question', models.CharField(max_length=255)),
                ('answer', models.CharField(blank=True, max_length=255)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='samfundet.purchasefeedbackmodel')),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('form', 'question')},
            },
        ),
        migrations.CreateModel(
            name='OccupiedTimeslot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_dt', models.DateTimeField(help_text='Start of occupied time')),
                ('end_dt', models.DateTimeField(help_text='End of occupied time')),
                ('user', models.ForeignKey(help_text='Occupied timeslots for user', on_delete=django.db.models.deletion.CASCADE, related_name='occupied_timeslots', to=settings.AUTH_USER_MODEL)),
                ('recruitment', models.ForeignKey(help_text='Which recruitment this occupancy applies to', on_delete=django.db.models.deletion.CASCADE, to='samfundet.recruitment')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('user', 'recruitment', 'start_dt', 'end_dt'), name='occupied_UNIQ')],
            },
        ),
    ]

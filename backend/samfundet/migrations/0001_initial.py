# Generated by Django 4.1.4 on 2023-01-31 19:52

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClosedPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_no', models.TextField(blank=True, null=True, verbose_name='Melding (norsk)')),
                ('description_no', models.TextField(blank=True, null=True, verbose_name='Beskrivelse (norsk)')),
                ('message_en', models.TextField(blank=True, null=True, verbose_name='Melding (engelsk)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Beskrivelse (engelsk)')),
                ('start_dt', models.DateField(blank=True, verbose_name='Start dato')),
                ('end_dt', models.DateField(blank=True, verbose_name='Slutt dato')),
            ],
            options={
                'verbose_name': 'Stengt periode',
                'verbose_name_plural': 'Stengt perioder',
            },
        ),
        migrations.CreateModel(
            name='EventGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=140)),
            ],
            options={
                'verbose_name': 'EventGroup',
                'verbose_name_plural': 'EventGroups',
            },
        ),
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_no', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Navn (norsk)')),
                ('name_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Navn (engelsk)')),
                ('order', models.PositiveSmallIntegerField(blank=True, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_no', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Navn (norsk)')),
                ('name_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Navn (engelsk)')),
            ],
        ),
        migrations.CreateModel(
            name='GangType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_no', models.CharField(blank=True, max_length=64, null=True, verbose_name='Gruppetype Norsk')),
                ('title_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Gruppetype Engelsk')),
            ],
            options={
                'verbose_name': 'GangType',
                'verbose_name_plural': 'GangTypes',
            },
        ),
        migrations.CreateModel(
            name='InformationPage',
            fields=[
                ('slug_field', models.SlugField(help_text='Primary key, this field will identify the object and be used in the URL.', max_length=64, primary_key=True, serialize=False, unique=True)),
                ('title_no', models.CharField(blank=True, max_length=64, null=True, verbose_name='Tittel (norsk)')),
                ('text_no', models.TextField(blank=True, null=True, verbose_name='Tekst (norsk)')),
                ('title_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Tittel (engelsk)')),
                ('text_en', models.TextField(blank=True, null=True, verbose_name='Tekst (engelsk)')),
            ],
            options={
                'verbose_name': 'InformationPage',
                'verbose_name_plural': 'InformationPages',
            },
        ),
        migrations.CreateModel(
            name='Saksdokument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_no', models.CharField(blank=True, max_length=80, null=True, verbose_name='Tittel (Norsk)')),
                ('title_en', models.CharField(blank=True, max_length=80, null=True, verbose_name='Tittel (Engelsk)')),
                ('publication_date', models.DateTimeField(blank=True, null=True)),
                ('category', models.CharField(choices=[('FS_REFERAT', 'FS-Referat'), ('STYRET', 'Styret'), ('RADET', 'Rådet'), ('ARSBERETNINGER', 'Årsberetninger, regnskap og budsjettkunngjøringer')], default='FS_REFERAT', max_length=25)),
                ('file', models.FileField(blank=True, null=True, upload_to='uploads/saksdokument/')),
            ],
            options={
                'verbose_name': 'Saksdokument',
                'verbose_name_plural': 'Saksdokument',
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=140, null=True, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('floor', models.IntegerField(blank=True, null=True)),
                ('last_renovated', models.DateTimeField(blank=True, null=True)),
                ('handicapped_approved', models.BooleanField(blank=True, null=True)),
                ('responsible_crew', models.CharField(blank=True, max_length=140, null=True)),
                ('opening', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('closing', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('opening_monday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('opening_tuesday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('opening_wednesday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('opening_thursday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('opening_friday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('opening_saturday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('opening_sunday', models.TimeField(blank=True, default=datetime.time(8, 0), null=True)),
                ('closing_monday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('closing_tuesday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('closing_wednesday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('closing_thursday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('closing_friday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('closing_saturday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
                ('closing_sunday', models.TimeField(blank=True, default=datetime.time(20, 0), null=True)),
            ],
            options={
                'verbose_name': 'Venue',
                'verbose_name_plural': 'Venues',
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(blank=True, choices=[('theme-light', 'Light'), ('theme-dark', 'Dark')], default='theme-light', max_length=30, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'UserPreference',
                'verbose_name_plural': 'UserPreferences',
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_no', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Navn (norsk)')),
                ('description_no', models.CharField(blank=True, max_length=64, null=True, verbose_name='Beskrivelse (norsk)')),
                ('name_en', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Navn (engelsk)')),
                ('description_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Beskrivelse (engelsk)')),
                ('seating', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('venue', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='samfundet.venue')),
            ],
            options={
                'verbose_name': 'Table',
                'verbose_name_plural': 'Tables',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(blank=True, max_length=30, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_no', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Navn (norsk)')),
                ('description_no', models.TextField(blank=True, null=True, verbose_name='Beskrivelse (norsk)')),
                ('name_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Navn (engelsk)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Beskrivelse (engelsk)')),
                ('price', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('price_member', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('order', models.PositiveSmallIntegerField(blank=True, null=True, unique=True)),
                ('food_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='samfundet.foodcategory')),
                ('food_preferences', models.ManyToManyField(blank=True, to='samfundet.foodpreference')),
            ],
            options={
                'verbose_name': 'MenuItem',
                'verbose_name_plural': 'MenuItems',
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_no', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='Navn (norsk)')),
                ('description_no', models.TextField(blank=True, null=True, verbose_name='Beskrivelse (norsk)')),
                ('name_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Navn (engelsk)')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Beskrivelse (engelsk)')),
                ('menu_items', models.ManyToManyField(blank=True, to='samfundet.menuitem')),
            ],
            options={
                'verbose_name': 'Menu',
                'verbose_name_plural': 'Menus',
            },
        ),
        migrations.CreateModel(
            name='Gang',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_no', models.CharField(blank=True, max_length=64, null=True, verbose_name='Navn Norsk')),
                ('name_en', models.CharField(blank=True, max_length=64, null=True, verbose_name='Navn Engelsk')),
                ('abbreviation', models.CharField(blank=True, max_length=64, null=True, verbose_name='Forkortelse')),
                ('webpage', models.URLField(blank=True, null=True, verbose_name='Nettside')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='ganglogos/', verbose_name='Logo')),
                ('gang_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gangs', to='samfundet.gangtype', verbose_name='Gruppetype')),
                ('info_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='samfundet.informationpage', verbose_name='Infoside')),
            ],
            options={
                'verbose_name': 'Gang',
                'verbose_name_plural': 'Gangs',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_no', models.CharField(max_length=140)),
                ('title_en', models.CharField(max_length=140)),
                ('description_long_no', models.TextField(blank=True, null=True)),
                ('description_long_en', models.TextField(blank=True, null=True)),
                ('description_short_no', models.TextField(blank=True, null=True)),
                ('description_short_en', models.TextField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=140, null=True)),
                ('codeword', models.CharField(blank=True, max_length=140, null=True)),
                ('start_dt', models.DateTimeField(blank=True, null=True)),
                ('duration', models.PositiveIntegerField(blank=True)),
                ('publish_dt', models.DateTimeField(blank=True, null=True)),
                ('host', models.CharField(blank=True, max_length=140, null=True)),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='events/', verbose_name='Banner')),
                ('status_group', models.CharField(blank=True, choices=[('active', 'Aktiv'), ('archived', 'Arkivert'), ('canceled', 'Avlyst')], max_length=30, null=True)),
                ('age_group', models.CharField(blank=True, choices=[('None', 'Ingen aldersgrense'), ('EIGHTEEN', '18 år'), ('TWENTY', '20 år'), ('MIXED', '18 år (student), 20 år (ikke-student)')], max_length=30, null=True)),
                ('price_group', models.CharField(blank=True, choices=[('INCLUDED', 'Included with entrance'), ('FREE', 'Free'), ('BILLIG', 'Paid'), ('REGISTRATION', 'Free with registration')], default='FREE', max_length=30, null=True)),
                ('capacity', models.PositiveIntegerField(blank=True, null=True)),
                ('event_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='samfundet.eventgroup')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, null=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('from_dt', models.DateTimeField(blank=True, null=True)),
                ('to_dt', models.DateTimeField(blank=True, null=True)),
                ('first_name', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('last_name', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('email', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('phone_nr', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('tables', models.ManyToManyField(blank=True, to='samfundet.table')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
            },
        ),
    ]

"""
Django settings for root project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from __future__ import annotations

import os
import sys
from pathlib import Path

import environ

from root.constants import Environment

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

IS_DOCKER = os.environ.get('IS_DOCKER') == 'yes'

# Load '.env'.
environ.Env.read_env(env_file=BASE_DIR / '.env', overwrite=False)

AUTH_USER_MODEL = 'samfundet.User'

DATABASE_ROUTERS = ['root.db_router.SamfundetDatabaseRouter']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
ALLOWED_HOSTS: list[str] = []

ENV = os.environ.get('ENV')

# Static
STATIC_ROOT = BASE_DIR / 'staticroot'
STATIC_URL = '/static/'

# Media
MEDIA_ROOT = BASE_DIR / 'mediaroot'
MEDIA_URL = '/media/'

# Production settings:
X_FRAME_OPTIONS = 'DENY'

SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

SECURE_HSTS_SECONDS = 60  # TODO: Find a decent value
SECURE_SSL_REDIRECT = True
SECURE_HSTS_PRELOAD = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True

CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'

DATE_INPUT_FORMATS = [
    '%d-%m-%Y',
    '%d.%m.%Y',
    '%d/%m/%Y',
]

SESSION_COOKIE_NAME = 'sessionid'
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 24 * 60 * 60 * 7
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Imported apps.
    'django_extensions',
    'corsheaders',
    'root',  # Register to enable management.commands.
    'samfundet',
]

MIDDLEWARE = [
    'root.custom_classes.middlewares.RequestLogMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'root.custom_classes.middlewares.ImpersonateUserMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',  # default
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',  # default
]

ROOT_URLCONF = 'root.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'root.wsgi.application'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # default
    'samfundet.backend.RoleAuthBackend',
]

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Europe/Oslo'
USE_I18N = False
USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

### DRF ###
INSTALLED_APPS += [
    'rest_framework',
]
# https://simpleisbetterthancomplex.com/tutorial/2018/11/22/how-to-implement-token-authentication-using-django-rest-framework.html

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticated',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticated',
        # 'rest_framework.permissions.DjangoObjectPermissions',
        'root.custom_classes.permission_classes.SuperUserPermission',
        # 'root.custom_classes.permission_classes.CustomDjangoObjectPermissions',
    ],
}
### End: DRF ###

### django-guardian ###
INSTALLED_APPS += [
    'guardian',
]
AUTHENTICATION_BACKENDS += [
    'guardian.backends.ObjectPermissionBackend',
]
### End: django-guardian ###

### admin_auto_filters ###
INSTALLED_APPS += [
    'admin_auto_filters',
]

### End: admin_auto_filters ###


################## LOGGING ##################

from root.utils.json_formatter import JsonFormatter  # noqa: E402
from root.custom_classes.request_context_filter import RequestContextFilter  # noqa: E402

LOGFILENAME = BASE_DIR / 'logs' / '.log'
SQL_LOG_FILE = BASE_DIR / 'logs' / 'sql.log'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            # Need to be a callable in order to use init parameters.
            '()': lambda: JsonFormatter(indent=4 if ENV == Environment.DEV else None),
        },
        'file': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
    },
    'filters': {
        'request_context_filter': {
            '()': RequestContextFilter,
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'null': {
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'formatter': 'json',
            'filename': LOGFILENAME,
            'filters': ['request_context_filter'],
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false'],
        },
        'humio': {
            'level': 'DEBUG' if ENV == Environment.DEV else 'INFO',
            'formatter': 'json',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'filters': ['request_context_filter'],
        },
        'sql_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'mode': 'w',
            'filename': SQL_LOG_FILE,  # Added to '.gitignore'.
            'filters': ['require_debug_true'],
        },
    },
    'loggers': {
        # Default logger.
        '': {
            'handlers': ['humio', 'file'],
            'propagate': True,
            'level': 'INFO',
        },
        # Catch all from django unless explicitly prevented propagation.
        'django': {
            'handlers': ['console', 'mail_admins'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'django.db.backends': {
            'handlers': ['sql_file'],
            'propagate': False,  # Don't pass up to 'django'.
            'level': 'DEBUG',
        },
        'django.server': {
            'handlers': ['console'],
            'propagate': False,  # Don't pass up to 'django'.
            'level': 'INFO',
        },
        'django.utils.autoreload': {
            'handlers': ['console'],
            'propagate': False,  # Don't pass up to 'django'.
            'level': 'INFO',
        },
    },
}

# Quick fix for avoiding concurrency issues related to db access
# Note: this might not be an ideal solution. See these links for information
# https://docs.djangoproject.com/en/1.10/topics/db/transactions/#django.db.transaction.on_commit
# https://medium.com/@hakibenita/how-to-manage-concurrency-in-django-models-b240fed4ee2
ATOMIC_REQUESTS = True
APPEND_SLASH = True

# ======================== #
#         Email            #
# ======================== #

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

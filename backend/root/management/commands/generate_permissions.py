from __future__ import annotations

from django.conf import settings
from django.utils import timezone
from django.contrib.auth.models import Permission
from django.core.management.base import BaseCommand

"""
NOTE: This command cannot run within docker container because the backend has no access to the frontend.
Use on host machine.
Therefore, the database must be up to date to get the latest permissions.
"""


def parse_permission_name(permission: Permission) -> str:
    """
    ```py
    SAMFUNDET_ADD_EVENT
    ```
    """
    return f'{permission.content_type.app_label}_{permission.codename}'.upper()


def parse_permission_value(permission: Permission) -> str:
    """
    ```py
    samfundet.add_event
    ```
    """
    return f'{permission.content_type.app_label}.{permission.codename}'


def parse_line(permission: Permission):
    """
    ```py
    SAMFUNDET_ADD_EVENT = 'samfundet.add_event'
    ```
    """
    name = parse_permission_name(permission=permission)
    value = parse_permission_value(permission=permission)
    line = f"{name} = '{value}'"
    return line


def ts_comment(string: str, /) -> str:
    return '// ' + string


def ts_docstring(string: str, /) -> str:
    return f'/**{string}*/'


### common ###
NEWLINE = '\n'
SEPARATOR = '#' * 60 + NEWLINE

### frontend ###
OUTPUT_FRONTEND_FILE = '../frontend/src/permissions/permissions.ts'

### backend ###
DOCSTRING = '"""'
YAPF_DISABLE = '# yapf: disable'
QUOTE = "'"

OUTPUT_BACKEND_FILE = 'root/utils/permissions.py'

ENTRY_MSG = f"""
{DOCSTRING}
THIS FILE IS AUTOGENERATED.
DO NOT WRITE IN THIS FILE, AS IT WILL BE OVERWRITTEN ON NEXT UPDATE.

THIS FILE WAS GENERATED BY: {__name__}
LAST UPDATE: {timezone.now()}
{DOCSTRING}
"""


class Command(BaseCommand):
    """Generate frontend routes"""

    def handle(self, *args, **options) -> None:  # type: ignore
        # Fetch all permissions.
        permissions = Permission.objects.all()

        with open(file=settings.BASE_DIR / OUTPUT_BACKEND_FILE, mode='w', encoding='UTF-8') as backend_file:
            with open(file=settings.BASE_DIR / OUTPUT_FRONTEND_FILE, mode='w', encoding='UTF-8') as frontend_file:
                # Write header.
                backend_file.write(YAPF_DISABLE)
                backend_file.write(ENTRY_MSG)
                backend_file.write(NEWLINE)
                backend_file.write(SEPARATOR)
                backend_file.write(NEWLINE)

                frontend_file.write(ts_docstring(ENTRY_MSG))
                frontend_file.write(NEWLINE * 2)
                frontend_file.write(ts_comment(SEPARATOR))
                frontend_file.write(NEWLINE)

                current_app = None
                current_model = None

                for permission in permissions:
                    # Write between different apps.
                    if current_app != permission.content_type.app_label:
                        prev_app = current_app
                        current_app = permission.content_type.app_label

                        app_footer = f'### End: {prev_app} ###'
                        app_header = f'### {current_app} ###'

                        if prev_app:
                            backend_file.write(app_footer + NEWLINE * 2)
                            frontend_file.write(ts_comment(app_footer) + NEWLINE * 2)

                        backend_file.write(app_header)
                        frontend_file.write(ts_comment(app_header))

                    # Write between different models within app.
                    if current_model != permission.content_type.model:
                        current_model = permission.content_type.model
                        backend_file.write(NEWLINE)
                        frontend_file.write(NEWLINE)

                    # Write permission.
                    line = parse_line(permission=permission)
                    backend_file.write(line + NEWLINE)
                    frontend_file.write(f'export const {line};{NEWLINE}')
